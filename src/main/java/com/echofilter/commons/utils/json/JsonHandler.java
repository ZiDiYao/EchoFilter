package com.echofilter.commons.utils.json;

import com.echofilter.commons.exceptions.InvalidJsonFormatException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.stereotype.Component;

@Component
public class JsonHandler {

    private final ObjectMapper objectMapper;

    public JsonHandler(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    public <T> T fromJson(String json, Class<T> clazz) {
        try {
            return objectMapper.readValue(json, clazz);
        } catch (JsonProcessingException e) {
            throw new InvalidJsonFormatException("JSON parse error: " + e.getMessage(), e);
        }
    }

    public String toJson(Object obj) {
        try {
            return objectMapper.writeValueAsString(obj);
        } catch (JsonProcessingException e) {
            throw new InvalidJsonFormatException("JSON write error: " + e.getMessage(), e);
        }
    }

    /**
     * be responsible for handling the text generated by LLM
     * @param text
     * @return
     */

    public String extractJsonSafely(String text) {
        if (text == null) {
            throw new InvalidJsonFormatException("LLM empty response");
        }
        int start = text.indexOf('{');
        int end = text.lastIndexOf('}');
        if (start >= 0 && end > start) {
            return text.substring(start, end + 1);
        }
        throw new InvalidJsonFormatException("No valid JSON object found in text");
    }
}
